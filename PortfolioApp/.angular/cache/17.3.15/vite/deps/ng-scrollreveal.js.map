{
  "version": 3,
  "sources": ["../../../../../node_modules/ng-scrollreveal/services/ngs-reveal-config.js", "../../../../../node_modules/ng-scrollreveal/services/window.service.js", "../../../../../node_modules/ng-scrollreveal/services/ngs-reveal.service.js", "../../../../../node_modules/ng-scrollreveal/directives/ngs-reveal-common.directive.js", "../../../../../node_modules/ng-scrollreveal/directives/ngs-reveal.directive.js", "../../../../../node_modules/ng-scrollreveal/directives/ngs-reveal-set.directive.js", "../../../../../node_modules/ng-scrollreveal/ngs-reveal.module.js"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\n/**\n * Configuration service for the NgScrollReveal directives.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the ngsReveal directives used in the application.\n */\nexport var NgsRevealConfig = (function () {\n    function NgsRevealConfig() {\n        // 'bottom', 'left', 'top', 'right'\n        this.origin = 'bottom';\n        // Can be any valid CSS distance, e.g. '5rem', '10%', '20vw', etc.\n        this.distance = '20px';\n        // Time in milliseconds.\n        this.duration = 500;\n        this.delay = 0;\n        // Starting angles in degrees, will transition from these values to 0 in all axes.\n        this.rotate = { x: 0, y: 0, z: 0 };\n        // Starting opacity value, before transitioning to the computed opacity.\n        this.opacity = 0;\n        // Starting scale value, will transition from this value to 1\n        this.scale = 0.9;\n        // Accepts any valid CSS easing, e.g. 'ease', 'ease-in-out', 'linear', etc.\n        this.easing = 'cubic-bezier(0.6, 0.2, 0.1, 1)';\n        // true/false to control reveal animations on mobile.\n        this.mobile = true;\n        // true:  reveals occur every time elements become visible\n        // false: reveals occur once as elements become visible\n        this.reset = false;\n        // 'always' — delay for all reveal animations\n        // 'once'   — delay only the first time reveals occur\n        // 'onload' - delay only for animations triggered by first load\n        this.useDelay = 'always';\n        // Change when an element is considered in the viewport. The default value\n        // of 0.20 means 20% of an element must be visible for its reveal to occur.\n        this.viewFactor = 0.2;\n        // Pixel values that alter the container boundaries.\n        // e.g. Set `{ top: 48 }`, if you have a 48px tall fixed toolbar.\n        // --\n        // Visual Aid: https://scrollrevealjs.org/assets/viewoffset.png\n        this.viewOffset = { top: 0, right: 0, bottom: 0, left: 0 };\n    }\n    NgsRevealConfig.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    NgsRevealConfig.ctorParameters = [];\n    return NgsRevealConfig;\n}());\n", "import { Injectable } from '@angular/core';\n/**\n * Service to interact with the window object.\n */\nexport var WindowService = (function () {\n    function WindowService() {\n    }\n    Object.defineProperty(WindowService.prototype, \"nativeWindow\", {\n        get: function () {\n            return _window();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WindowService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    WindowService.ctorParameters = [];\n    return WindowService;\n}());\nfunction _window() {\n    // Return the global native browser window object\n    return typeof window !== 'undefined' ? window : undefined;\n}\n", "import { Injectable } from '@angular/core';\nimport { NgsRevealConfig } from './ngs-reveal-config';\nimport { WindowService } from './window.service';\n/**\n * Service to inject in directives to use ScrollReveal JS.\n * It delegates the work to SR, when DOM manipulation is possible (i.e app is not running in a web worker for e.g).\n * If not possible, most methods simply do nothing, as DOM elements are not available anyway.\n */\nexport var NgsRevealService = (function () {\n    function NgsRevealService(config, windowService) {\n        this.config = config;\n        this.windowService = windowService;\n        this.window = windowService.nativeWindow;\n        if (this.window) {\n            // init the scrollReveal library with injected config\n            var srConfig = Object.assign({}, config || {});\n            this.sr = ScrollReveal(srConfig);\n        }\n    }\n    /**\n     * Method to reveal a single DOM element.\n     * @param elementRef  a reference to the element to reveal\n     * @param config      (optional) custom configuration to use when revealing this element\n     */\n    NgsRevealService.prototype.reveal = function (elementRef, config) {\n        if (!this.window) {\n            return null;\n        }\n        return elementRef.nativeElement ?\n            this.sr.reveal(elementRef.nativeElement, config) : this.sr;\n    };\n    /**\n     * Method to reveal a set of DOM elements.\n     * @param parentElementRef  the parent DOM element encaspulating the child elements to reveal\n     * @param selector          a list of CSS selectors (comma-separated) that identifies child elements to reveal\n     * @param interval          (optional) interval in milliseconds, to animate child elemnts sequentially\n     * @param config            (optional) custom configuration to use when revealing this set of elements\n     */\n    NgsRevealService.prototype.revealSet = function (parentElementRef, selector, interval, config) {\n        if (!this.window) {\n            return null;\n        }\n        return parentElementRef.nativeElement ?\n            this.sr.reveal(selector, config, interval) : this.sr;\n    };\n    /**\n     * Method to synchronize and consider newly added child elements (for e.g when child elements were added asynchronously to parent DOM) .\n     */\n    NgsRevealService.prototype.sync = function () {\n        if (this.window) {\n            this.sr.sync();\n        }\n    };\n    NgsRevealService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    NgsRevealService.ctorParameters = [\n        { type: NgsRevealConfig, },\n        { type: WindowService, },\n    ];\n    return NgsRevealService;\n}());\n", "/**\n * Base directive class shared by the concrete ScrollReveal directives.\n */\nexport var AbstractNgsRevealDirective = (function () {\n    function AbstractNgsRevealDirective(ngsRevealService) {\n        this.ngsRevealService = ngsRevealService;\n    }\n    AbstractNgsRevealDirective.prototype._initConfig = function (value) {\n        if (value && typeof value === 'string') {\n            this.config = JSON.parse(value);\n        }\n        else if (value && typeof value === 'object') {\n            this.config = value;\n        }\n    };\n    return AbstractNgsRevealDirective;\n}());\n", "var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Directive, HostBinding, ElementRef, Input } from '@angular/core';\nimport { NgsRevealService } from '../services/ngs-reveal.service';\nimport { AbstractNgsRevealDirective } from './ngs-reveal-common.directive';\n/**\n * Directive to add 'ScrollReveal' functionality to a <b>single DOM element</b> in the page.\n */\nexport var NgsRevealDirective = (function (_super) {\n    __extends(NgsRevealDirective, _super);\n    function NgsRevealDirective(elementRef, ngsRevealService) {\n        _super.call(this, ngsRevealService);\n        this.elementRef = elementRef;\n        this.visibility = 'hidden';\n    }\n    Object.defineProperty(NgsRevealDirective.prototype, \"_config\", {\n        /**\n         * Custom configuration to use when revealing this element\n         */\n        set: function (value) {\n            this._initConfig(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgsRevealDirective.prototype.ngOnInit = function () {\n        this.ngsRevealService.reveal(this.elementRef, this.config);\n    };\n    NgsRevealDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[ngsReveal]'\n                },] },\n    ];\n    /** @nocollapse */\n    NgsRevealDirective.ctorParameters = [\n        { type: ElementRef, },\n        { type: NgsRevealService, },\n    ];\n    NgsRevealDirective.propDecorators = {\n        'visibility': [{ type: HostBinding, args: ['style.visibility',] },],\n        '_config': [{ type: Input, args: ['ngsReveal',] },],\n    };\n    return NgsRevealDirective;\n}(AbstractNgsRevealDirective));\n", "var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Directive, ElementRef, Input } from '@angular/core';\nimport { NgsRevealService } from '../services/ngs-reveal.service';\nimport { AbstractNgsRevealDirective } from './ngs-reveal-common.directive';\n/**\n * Directive to add 'ScrollReveal' functionality to a <b>set of DOM elements</b> (identify via the `[ngsSelector]` attribute) in the page.\n * This directive is meant to be placed on the <b>parent node</b> that contains the child elements to reveal.\n * You can optionally add the `[ngsInterval]` attribute to reveal items sequentially, following the given interval(in milliseconds).\n * You can optionally add the `[ngsSync]` attribute to reveal new child elements that may have been added in the parent node asynchronously.\n *\n */\nexport var NgsRevealSetDirective = (function (_super) {\n    __extends(NgsRevealSetDirective, _super);\n    function NgsRevealSetDirective(elementRef, ngsRevealService) {\n        _super.call(this, ngsRevealService);\n        this.elementRef = elementRef;\n    }\n    Object.defineProperty(NgsRevealSetDirective.prototype, \"_config\", {\n        /**\n         * Custom configuration to use when revealing this set of elements\n         */\n        set: function (value) {\n            this._initConfig(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgsRevealSetDirective.prototype.ngOnInit = function () {\n        if (!this.ngsSelector && console) {\n            var item = this.elementRef.nativeElement ? this.elementRef.nativeElement.className : '';\n            console.error(\"[ng-scrollreveal] You must set \\\"[ngsSelector]\\\" attribute on item '\" + item + \"' when using \\\"ngsRevealSet\\\"\");\n            return;\n        }\n        this.ngsRevealService.revealSet(this.elementRef, this.ngsSelector, this.ngsInterval, this.config);\n    };\n    NgsRevealSetDirective.prototype.ngOnChanges = function (changes) {\n        var ngsSyncProp = 'ngsSync';\n        if (ngsSyncProp in changes\n            && !changes[ngsSyncProp].isFirstChange()\n            && !changes[ngsSyncProp].currentValue()) {\n            this.ngsRevealService.sync();\n        }\n    };\n    NgsRevealSetDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[ngsRevealSet]'\n                },] },\n    ];\n    /** @nocollapse */\n    NgsRevealSetDirective.ctorParameters = [\n        { type: ElementRef, },\n        { type: NgsRevealService, },\n    ];\n    NgsRevealSetDirective.propDecorators = {\n        '_config': [{ type: Input, args: ['ngsRevealSet',] },],\n        'ngsSelector': [{ type: Input },],\n        'ngsInterval': [{ type: Input },],\n        'ngsSync': [{ type: Input },],\n    };\n    return NgsRevealSetDirective;\n}(AbstractNgsRevealDirective));\n", "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WindowService, NgsRevealService, NgsRevealConfig } from './services/index';\nimport { NgsRevealDirective, NgsRevealSetDirective } from './directives/index';\nexport { WindowService, NgsRevealService, NgsRevealConfig } from './services/index';\nexport { NgsRevealDirective, NgsRevealSetDirective } from './directives/index';\n/**\n * Main module of the library\n */\nexport var NgsRevealModule = (function () {\n    function NgsRevealModule() {\n    }\n    NgsRevealModule.forRoot = function () {\n        return {\n            ngModule: NgsRevealModule,\n            providers: [WindowService, NgsRevealService, NgsRevealConfig]\n        };\n    };\n    NgsRevealModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [\n                        CommonModule\n                    ],\n                    exports: [NgsRevealDirective, NgsRevealSetDirective],\n                    declarations: [NgsRevealDirective, NgsRevealSetDirective]\n                },] },\n    ];\n    /** @nocollapse */\n    NgsRevealModule.ctorParameters = [];\n    return NgsRevealModule;\n}());\n"],
  "mappings": "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",
  "names": ["NgsRevealConfig", "WindowService", "NgsRevealService", "AbstractNgsRevealDirective", "NgsRevealDirective", "__extends", "NgsRevealSetDirective", "NgsRevealModule"]
}
